package functions

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"os"
	"time"
	"encoding/json"
	"bytes"

	"cloud.google.com/go/firestore"
	"github.com/GoogleCloudPlatform/functions-framework-go/functions"
)

// firestoreClient - —ç—Ç–æ –Ω–∞—à "–ø—Ä–æ–ø—É—Å–∫" –≤ –∫–∞—Ä—Ç–æ—Ç–µ–∫—É.
// –ú—ã —Å–æ–∑–¥–∞–µ–º –µ–≥–æ –æ–¥–∏–Ω —Ä–∞–∑, —á—Ç–æ–±—ã –Ω–µ –¥–µ–ª–∞—Ç—å —ç—Ç–æ –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.
var firestoreClient *firestore.Client

func init() {
	// –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ "–ø—Ä–æ–≥—Ä–µ–≤–µ" –æ–±–ª–∞—á–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.
	// –ó–¥–µ—Å—å –º—ã –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Firestore.
	ctx := context.Background()
	projectID := os.Getenv("GCP_PROJECT_ID") // –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
	if projectID == "" {
		log.Fatalf("GCP_PROJECT_ID environment variable must be set.")
	}

	var err error
	firestoreClient, err = firestore.NewClient(ctx, projectID)
	if err != nil {
		log.Fatalf("Failed to create Firestore client: %v", err)
	}

	functions.HTTP("TelegramWebhookHandler", telegramWebhookHandler)
}

// Update, Message, Chat - —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è —Ä–∞–∑–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Telegram.
// –û–Ω–∏ –æ—Å—Ç–∞–ª–∏—Å—å —Ç–∞–∫–∏–º–∏ –∂–µ, –∫–∞–∫ –∏ –≤ —ç—Ö–æ-–±–æ—Ç–µ.
type Update struct {
	Message Message `json:"message"`
}
type Message struct {
	Text string `json:"text"`
	Chat Chat   `json:"chat"`
}
type Chat struct {
	ID int64 `json:"id"`
}

// Note - —ç—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–∞—à–µ–π "–∫–∞—Ä—Ç–æ—á–∫–∏" –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Firestore.
type Note struct {
	Text      string    `firestore:"text"`
	UserID    int64     `firestore:"userID"`
	CreatedAt time.Time `firestore:"createdAt"`
}

func telegramWebhookHandler(w http.ResponseWriter, r *http.Request) {
	var update Update
	if err := json.NewDecoder(r.Body).Decode(&update); err != nil {
		log.Printf("could not decode request: %v", err)
		return
	}

	if update.Message.Text == "" {
		return // –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	}

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é "–∫–∞—Ä—Ç–æ—á–∫—É"-–∑–∞–º–µ—Ç–∫—É
	newNote := Note{
		Text:      update.Message.Text,
		UserID:    update.Message.Chat.ID,
		CreatedAt: time.Now(),
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—à—É "–∫–∞—Ä—Ç–æ—á–∫—É" –≤ —è—â–∏–∫ (–∫–æ–ª–ª–µ–∫—Ü–∏—é) "notes".
	// Firestore —Å–∞–º –ø—Ä–∏—Å–≤–æ–∏—Ç –µ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID.
	_, _, err := firestoreClient.Collection("notes").Add(context.Background(), newNote)
	if err != nil {
		log.Printf("Failed to add note to Firestore: %v", err)
		// –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å, —Å–æ–æ–±—â–∏–º –æ–± —ç—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
		sendMessage(update.Message.Chat.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É. üòî")
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.
	sendMessage(update.Message.Chat.ID, "–ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! üëç")
}

// sendMessage –æ—Å—Ç–∞–ª–∞—Å—å —Ç–∞–∫–æ–π –∂–µ, –∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ.
// –ú—ã –≤—ã–Ω–µ—Å–ª–∏ –µ–µ, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥.
func sendMessage(chatID int64, text string) {
	token := os.Getenv("TELEGRAM_BOT_TOKEN")
	apiURL := fmt.Sprintf("https://api.telegram.org/bot%s/sendMessage", token)
	requestBody, _ := json.Marshal(map[string]interface{}{
		"chat_id": chatID,
		"text":    text,
	})
	http.Post(apiURL, "application/json", bytes.NewBuffer(requestBody))
}