// –§–∞–π–ª: internal/bot/commands.go
package bot

import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/Denol007/telegram-personal-assistant-go/internal/note"
	"github.com/Denol007/telegram-personal-assistant-go/internal/telegram"
)

// handleListCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /list.
func (h *Handler) handleListCommand(chatID int64) {
	notes, err := h.store.GetAllNotesByUser(context.Background(), chatID)
	if err != nil {
		log.Printf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫: %v", err)
		telegram.Send(h.token, chatID, "–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–º–µ—Ç–∫–∏ :(")
		return
	}

	if len(notes) == 0 {
		telegram.Send(h.token, chatID, "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.")
		return
	}

	var sb strings.Builder
	sb.WriteString("–¢–≤–æ–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏:\n")
	for i, n := range notes {
		sb.WriteString(fmt.Sprintf("%d. %s\n", i+1, n.Text))
	}

	telegram.Send(h.token, chatID, sb.String())
}

// handleSaveNote –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏.
func (h *Handler) handleSaveNote(chatID int64, text string) {
	newNote := note.Note{
		Text:      text,
		UserID:    chatID,
		CreatedAt: time.Now(),
	}

	if err := h.store.SaveNote(context.Background(), newNote); err != nil {
		log.Printf("Failed to save note: %v", err)
		telegram.Send(h.token, chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É. üòî")
		return
	}
	telegram.Send(h.token, chatID, "–ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! üëç")
}
