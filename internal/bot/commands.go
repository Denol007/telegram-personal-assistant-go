// –§–∞–π–ª: internal/bot/commands.go
package bot

import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/Denol007/telegram-personal-assistant-go/internal/note"
	"github.com/Denol007/telegram-personal-assistant-go/internal/telegram"
)

// handleListCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /list.
func (h *Handler) handleListCommand(chatID int64) {
	notes, err := h.store.GetAllNotesByUser(context.Background(), chatID)
	if err != nil {
		log.Printf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫: %v", err)
		telegram.Send(h.token, chatID, "–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–º–µ—Ç–∫–∏ :(", nil)
		return
	}

	if len(notes) == 0 {
		telegram.Send(h.token, chatID, "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.", nil)
		return
	}

	var sb strings.Builder
	sb.WriteString("–¢–≤–æ–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏:\n")
	for i, n := range notes {
		sb.WriteString(fmt.Sprintf("%d. %s\n", i+1, n.Text))
	}

	telegram.Send(h.token, chatID, sb.String(), nil)
}

func (h *Handler) handleDeleteCommand(chatID int64, text string) {
	var noteNumber int 
	_, err := fmt.Sscanf(text, "/delete %d", &noteNumber)
	if err != nil {
		log.Printf("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: %s", text)
		telegram.Send(h.token, chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: /delete 3", nil)
		return
	}

	notes, err := h.store.GetAllNotesByUser(context.Background(), chatID)
	if err != nil {
    	log.Printf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫: %v", err)
    	telegram.Send(h.token, chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–º–µ—Ç–∫–∏", nil)
    	return
	}

	if noteNumber < 1 || noteNumber > len(notes) {
		telegram.Send(h.token, chatID, "–ó–∞–º–µ—Ç–∫–∏ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", nil)
    	return
	} else {
		noteToDelete := notes[noteNumber-1]
		
		// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
		messageText := fmt.Sprintf("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É?\n\n\"%s\"", noteToDelete.Text)
		
		// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
		keyboard := telegram.InlineKeyboardMarkup{
			InlineKeyboard: [][]telegram.InlineKeyboardButton{
				{
					{
						Text:         "–£–¥–∞–ª–∏—Ç—å",
						CallbackData: fmt.Sprintf("delete_note:%s", noteToDelete.ID),
					},
					{
						Text:         "–û—Ç–º–µ–Ω–∞",
						CallbackData: "cancel_delete",
					},
				},
			},
		}
		
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
		telegram.Send(h.token, chatID, messageText, &keyboard)
	}

}



// handleSaveNote –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏.
func (h *Handler) handleSaveNote(chatID int64, text string) {
	newNote := note.Note{
		Text:      text,
		UserID:    chatID,
		CreatedAt: time.Now(),
	}

	if err := h.store.SaveNote(context.Background(), newNote); err != nil {
		log.Printf("Failed to save note: %v", err)
		telegram.Send(h.token, chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É. üòî", nil)
		return
	}
	telegram.Send(h.token, chatID, "–ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! üëç", nil)
}

// handleCallbackQuery –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏.
func (h *Handler) handleCallbackQuery(callbackQuery *telegram.CallbackQuery) {
	chatID := callbackQuery.Message.Chat.ID
	data := callbackQuery.Data

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ callback query (—É–±–∏—Ä–∞–µ—Ç "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ)
	telegram.AnswerCallbackQuery(h.token, callbackQuery.ID)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∞—è –∫–Ω–æ–ø–∫–∞ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞
	if data == "cancel_delete" {
		// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª —É–¥–∞–ª–µ–Ω–∏–µ
		telegram.Send(h.token, chatID, "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", nil)
	} else if strings.HasPrefix(data, "delete_note:") {
		// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —É–¥–∞–ª–µ–Ω–∏–µ
		// –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–º–µ—Ç–∫–∏ –∏–∑ callback data
		noteID := strings.TrimPrefix(data, "delete_note:")
		h.handleConfirmDelete(chatID, noteID)
	}
}

// handleConfirmDelete –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏.
func (h *Handler) handleConfirmDelete(chatID int64, noteID string) {
	err := h.store.DeleteNote(context.Background(), noteID)
	if err != nil {
		log.Printf("–æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ %s: %v", noteID, err)
		telegram.Send(h.token, chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É :(", nil)
		return
	}
	telegram.Send(h.token, chatID, "–ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞! üóëÔ∏è", nil)
}


func (h *Handler) handleEditCommand(chatID int64, text string) {
	var noteNumber int
	_, err := fmt.Sscanf(text, "/edit %d", &noteNumber)
	if err != nil {
		log.Printf("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: %s", text)
		telegram.Send(h.token, chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: /edit 3", nil)
		return
	}

	notes, err := h.store.GetAllNotesByUser(context.Background(), chatID)
	if err != nil {
		log.Printf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫: %v", err)
		telegram.Send(h.token, chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–º–µ—Ç–∫–∏", nil)
		return
	}

	if noteNumber < 1 || noteNumber > len(notes) {
		telegram.Send(h.token, chatID, "–ó–∞–º–µ—Ç–∫–∏ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", nil)
		return
	}

	noteToEdit := notes[noteNumber-1]
	
	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º —Ç–µ–∫—Å—Ç–æ–º –∑–∞–º–µ—Ç–∫–∏ –∏ —Å–∫—Ä—ã—Ç—ã–º ID
	messageText := fmt.Sprintf("–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:\n\n\"%s\"\n\n–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:\nedit_note:%s", noteToEdit.Text, noteToEdit.ID)
	
	// –°–æ–∑–¥–∞–µ–º ForceReply
	forceReply := telegram.ForceReply{
		ForceReply:            true,
		InputFieldPlaceholder: "–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏...",
		Selective:             false,
	}
	
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ForceReply
	telegram.Send(h.token, chatID, messageText, &forceReply)
}

// handleEditResponse –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∑–∞–ø—Ä–æ—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏.
func (h *Handler) handleEditResponse(chatID int64, noteID string, newText string) {
	err := h.store.UpdateNote(context.Background(), noteID, newText)
	if err != nil {
		log.Printf("–æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ %s: %v", noteID, err)
		telegram.Send(h.token, chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É :(", nil)
		return
	}
	telegram.Send(h.token, chatID, "–ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞! ‚úèÔ∏è", nil)
}

// handleReplyMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ ForceReply.
func (h *Handler) handleReplyMessage(chatID int64, text string, replyToMessage *telegram.Message) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏
	if strings.Contains(replyToMessage.Text, "edit_note:") {
		// –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–º–µ—Ç–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
		// –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω "edit_note:ID" –≤ —Ç–µ–∫—Å—Ç–µ
		lines := strings.Split(replyToMessage.Text, "\n")
		for _, line := range lines {
			if strings.Contains(line, "edit_note:") {
				// –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ "–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏: edit_note:abc123"
				parts := strings.Split(line, "edit_note:")
				if len(parts) >= 2 {
					noteID := strings.TrimSpace(parts[1])
					h.handleEditResponse(chatID, noteID, text)
					return
				}
			}
		}
	}
	
	// –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É
	h.handleSaveNote(chatID, text)
}
